# This file was generated by MathematicaToFEniCS
from MathematicaToFEniCS import *
from mesh import *


# Custom code
EXPR1 = Expression("x[0]")
EXPR2 = Expression("x[1]")
alpha = Constant(1.0)


# Define few useful expressions
ptxexpr = Expression(("x[0]","x[1]","x[2]"))
ptx = lambda i: ptxexpr[i]


# Initialize function spaces and functions
funSpaceLagrange1 = FunctionSpace(mesh, 'Lagrange', 1)
totalSpace = MixedFunctionSpace([funSpaceLagrange1,funSpaceLagrange1])
w = Function( totalSpace )
u,v = split(w)
tu,tv = TestFunctions(totalSpace)


# Define weak form
def F1(w):
	u,v = split(w)
	return (-(tu*(1 + alpha + ptx(0) + ptx(1) - v)) + Derivative(0,1)(tu)*Derivative(0,1)(u) + Derivative(1,0)(tu)*Derivative(1,0)(u))*dx

def F2(w):
	u,v = split(w)
	return (-(tv*(-1 + u)) + Derivative(0,1)(tv)*Derivative(0,1)(v) + Derivative(1,0)(tv)*Derivative(1,0)(v))*dx

F = F1(w)+F2(w)


# Define boundary conditions
bc_u_1 = DirichletBC(totalSpace.sub(0), EXPR1, boundary_parts, 1)
bc_u_2 = DirichletBC(totalSpace.sub(0), 0, boundary_parts, 2)
bc_u_3 = DirichletBC(totalSpace.sub(0), 0, boundary_parts, 3)
bc_v_1 = DirichletBC(totalSpace.sub(1), 0, boundary_parts, 1)
bc_v_2 = DirichletBC(totalSpace.sub(1), EXPR2, boundary_parts, 2)
bc_v_3 = DirichletBC(totalSpace.sub(1), 0, boundary_parts, 3)
bc = [bc_u_1,bc_u_2,bc_u_3,bc_v_1,bc_v_2,bc_v_3]


# Initialize solver
J = derivative(F,w)
problem = NonlinearVariationalProblem(F,w,bc,J)
solver = NonlinearVariationalSolver(problem)

prm = solver.parameters
prm['newton_solver']['absolute_tolerance'] = 1E-8
prm['newton_solver']['relative_tolerance'] = 1E-7
prm['newton_solver']['maximum_iterations'] = 10
prm['newton_solver']['relaxation_parameter'] = 1.0


# Solve and plot
solver.solve()


# Custom code
plot(u)
plot(v)
e1 = Constant((1,0))
e2 = Constant((0,1))
plot(e1*u+e2*v)
interactive()


